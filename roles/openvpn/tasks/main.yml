---
- name: Install requirements
  apt:
    name: ["openvpn", "easy-rsa"]
    update_cache: no
    state: present
  ignore_errors: no
  become: yes
  tags: install

- name: check if ca dir exists
  stat:
    path: "{{ ca_dir }}"
  register: ca


- name: Create ca dir
  shell: cp -r /usr/share/easy-rsa {{ ca_dir }}
  become: yes
  ignore_errors: yes 
  when: ca.stat.exists == false

- name: check if pki dir exists
  stat: 
    path: "{{ ca_dir }}/pki"
  register: pki_dir

- name: check if cert file exists
  stat:
    path: "{{ ca_dir }}/pki/ca.crt"
  register: cert_file

- name: check if server cert file exists
  stat:
    path: "{{ ca_dir }}/pki/issued/server.crt"
  register: server_file

- name: Init pki
  shell: ./easyrsa init-pki
  args:
    executable: /bin/bash
    chdir: "{{ ca_dir }}"
  become: yes
  when: pki_dir.stat.exists == false

- name: generate the CA certificate
  shell: ./easyrsa --batch build-ca nopass
  args:
    executable: /bin/bash
    chdir: "{{ ca_dir }}"
  become: yes
  when: cert_file.stat.exists == false

- name: check if dh file exists
  stat:
    path: "{{ ca_dir }}/pki/dh.pem"
  register: dh_file

- name: check if ta file exists
  stat:
    path: "{{ ca_dir }}/pki/ta.key"
  register: ta_file

- name: Generate Diffie-Hellman
  shell: ./easyrsa gen-dh
  args:
    executable: /bin/bash
    chdir: "{{ ca_dir }}"
  become: yes
  when: dh_file.stat.exists == false

- name: generate a certificate for server
  shell: ./easyrsa build-server-full server nopass && ./easyrsa gen-crl
  args:
    executable: /bin/bash
    chdir: "{{ ca_dir }}"
  become: yes
  when: server_file.stat.exists == false

- name: Generate (HMAC) key
  shell: openvpn --genkey --secret {{ ca_dir }}/pki/ta.key
  become: yes
  when: ta_file.stat.exists == false

- name: Copy all generated server certificates
  shell: cp -rp {{ ca_dir }}/pki/ca.crt {{ ca_dir }}/pki/dh.pem {{ ca_dir }}/pki/ta.key {{ ca_dir }}/pki/crl.pem {{ ca_dir }}/pki/issued {{ ca_dir }}/pki/private /etc/openvpn/server
  become: yes

- name: check if client exists
  stat:
    path: "{{ ca_dir }}/pki/issued/{{ vpn_user }}.crt"
  register: user_file

- name: Generate Client Certificates
  shell: ./easyrsa build-client-full {{ vpn_user }} nopass
  args:
    executable: /bin/bash
    chdir: "{{ ca_dir }}"
  become: yes
  when: user_file.stat.exists == false

- name: Make client dir
  file:
    path: "{{ client_dir }}/{{ vpn_user }}"
    state: directory
  become: yes

- name: Copy Client Certificates to Client Directory
  shell: cp -rp {{ ca_dir }}/pki/ca.crt {{ ca_dir }}/pki/issued/{{ vpn_user }}.crt {{ ca_dir }}/pki/private/{{ vpn_user }}.key {{ client_dir }}/{{ vpn_user }}
  become: yes

- name: Copy files to client dir
  copy: src={{ item.src }} dest={{ item.dest }} mode=700
  with_items:
    - { src: 'server.conf', dest: '/etc/openvpn/server' }
    - { src: 'base.conf', dest: '{{ client_dir }}' }
    - { src: 'make_config.sh', dest: '{{ client_dir }}' }
    - { src: 'add_new_keys.sh', dest: '{{ client_dir }}' }
    - { src: 'add_new_client.py', dest: '{{ client_dir }}' }
  become: yes

- name: Add remote to base.conf
  shell: echo "remote {{ inventory_hostname }} 1194" >> base.conf
  args:
    executable: /bin/bash
    chdir: "{{ client_dir }}"
  become: yes

- name: Create certs dir
  file:
    path: "/home/ubuntu/certs"
    state: directory
    owner: www-data
    group: www-data
  become: yes

- name: gen ovpn file
  shell: bash make_config.sh {{ vpn_user }}
  args:
    executable: /bin/bash
    chdir: "{{ client_dir }}"
  become: yes

- name: Configure IP Forwarding
  shell: sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf && sysctl --system && ufw allow 1194/udp && ufw allow ssh
  become: yes

- name: Configure IP Masquerading
  copy:
    src: before.rules
    dest: /etc/ufw
    mode: '700' 
  become: yes

- name: Add remote to base.conf
  shell: sed -i 's/DEFAULT_FORWARD_POLICY="DROP"/DEFAULT_FORWARD_POLICY="ACCEPT"/' /etc/default/ufw
  become: yes

- name: enable UFW
  ufw:
    state: enabled

- name: start openvpn server
  shell: systemctl enable --now openvpn-server@server
  become: yes
